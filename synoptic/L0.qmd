---
title: "Workflow: L0"
author: "COMPASS workflows team"
title-block-banner: true
params:
  html_outfile: "L0.html"
  DATA_ROOT: "data_TEST/"
  RAW: "Raw/"
  L0: "L0/"
  logfile: ""
  run_parallel: false
date: now
date-format: "YYYY-MM-DD HH:mm:ssZ"
format: 
  html:
    code-fold: true
editor: visual
---

This script

-   Reads in the raw data files one by one

-   Extracts `Logger` and `Table` information from the header and adds them as columns

-   Reshapes from wide to long; only `Logger`, `Table`, and `TIMESTAMP` don't get reshaped

-   Adds a unique observation ID (using `digest::digest()` )

-   Writes as CSV files with row/col/hash info in filename

## Initializing

```{r init}
#| include: false

RAW <- file.path(params$DATA_ROOT, params$RAW)
L0 <- file.path(params$DATA_ROOT, params$L0)

library(tidyr)
library(readr)
library(compasstools)
if(packageVersion("compasstools") < "0.2") {
    stop("Please update to latest version of compasstools!\n",
         "devtools::install_github('COMPASS-DOE/compasstools')")
}

files_to_process <- list.files(RAW, pattern = "*.dat$", 
                               full.names = TRUE, recursive = TRUE)

source("helpers.R")
```

I see `r length(files_to_process)` files to process in `r RAW`.

Output directory is `r L0`.

HTML outfile is `r params$html_outfile`.

Logfile is `r params$logfile`.

Working directory is `r getwd()`.

## Processing

```{r processing}
overwrites <- 0
errors <- 0

f <- function(fn, new_dir) {

    basefn <- basename(fn)
    message(Sys.time(), " Processing ", basefn)
    
    dat <- read_datalogger_file(fn, col_types = cols(.default = col_character()))
    message("\tOriginal data is ", nrow(dat), " x ", ncol(dat))
    note <- ""
    long_rows <- long_cols <- short_hash <- NA

    # Roy: "I generally have a filter that checks and throws out data with very few lines 
    # as they are usually garbage, I have my input check for <4 lines after header" 
    if(nrow(dat) < 4) {
        message("\tRaw data file is very short and likely garbage; skipping")
        note <- "Too short; skipped"
    } else {
        # Pivot to long form. We need to do this now to calculate unique observation IDs
        dat_long <- pivot_longer(dat, c(-Logger, -Table, -TIMESTAMP),
                                 names_to = "loggernet_variable",
                                 values_to = "value")
        long_rows <- nrow(dat_long)
        long_cols <- ncol(dat_long)
        message("\tPivoted data is ", long_rows, " x ", long_cols)
        
        # Remove duplicates
        dupes <- duplicated(dat_long)
        if(any(dupes)) {
            message("\rRemoving ", sum(dupes), " duplicate rows")
            dat_long <- dat_long[!dupes,]
        }
        
        # Add a unique ID column
        # We use digest::digest() and the "md5" algorithm (first 10 characters);
        # originally tried the "crc32" algorithm but this generated duplicate IDs
        # This is not *guaranteed* to be unique, but collisions are highly unlikely
        dat_long$ID <- sapply(apply(dat_long, 1, paste, collapse = ""),
                              FUN = function(x) {
                                  substr(digest::digest(x, algo = "md5"), 1, 16)
                              })
        
        # Construct the new filename: old filename + nrow + ncol + short hash
        # This is so we can distinguish datasets with identical raw filename but
        # differing data contents (can happen sometimes with dataloggers)
        stripped_fn <- gsub("\\.dat$", "", basefn)
        short_hash <- substr(digest::digest(dat_long, algo = "md5"), 1, 4)
        new_fn <- paste0(stripped_fn, "_", long_rows, "x", long_cols, "_", short_hash, ".csv")
        
        if(file.exists(file.path(new_dir, new_fn))) {
            note <- "Overwriting existing file"
            message("\t", note)
            overwrites <<- overwrites + 1
        }
        
        # Write the new file
        new_fqfn <- file.path(new_dir, new_fn)
        message("\tWriting ", new_fqfn)
        write.csv(dat_long, new_fqfn, row.names = FALSE)
        rm(dat_long)
    }
    
    # Return an informational data frame about file processed, dimensions, etc.
    data.frame(File = basefn,
               Orig_rows = nrow(dat),
               Orig_columns = ncol(dat),
               Rows = long_rows,
               Columns = long_cols,
               Hash = short_hash,
               Note = note)
}

# We can optionally process in parallel using all available cores
if(params$run_parallel) {
    library(parallel)
    apply_func = mclapply
    options(mc.cores = detectCores())
    message("Using parallel::mclapply with ", getOption("mc.cores"), " cores")
} else {
    apply_func = lapply
}

log_info("About to L0", logfile = params$logfile)
tryCatch({
    out <- apply_func(files_to_process, f, new_dir = L0)
},
error = function(e) {
    log_warning("L0: an error occurred!", logfile = params$logfile)
    log_info(as.character(e), logfile = params$logfile)
    stop(e)
})
```

## Summary

```{r summary}
#| echo: false
#| output: asis
if(overwrites) {
    cat("#### NOTE: ", overwrites, " file overwrite(s)\n")
    log_warning(paste("File overwrite(s)", params$html_outfile), 
                logfile = params$logfile)
}
if(errors) {
    cat("#### WARNING: ", errors, " file read/write error(s)\n")
    log_warning(paste("File read/write error(s)", params$html_outfile), 
                logfile = params$logfile)
}
```

```{r summary_table}
out_df <- do.call("rbind", out)
knitr::kable(out_df)
```

## Reproducibility

Git commit `r GIT_COMMIT`.

```{r reproducibility}
sessionInfo()
```
