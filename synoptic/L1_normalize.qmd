---
title: "L1_normalize"
author: "COMPASS workflows team"
title-block-banner: true
params:
  html_outfile: "L1_normalize.html"
  DATA_ROOT: "data_TEST/"
  METADATA_ROOT: "metadata/"
  L0: "L0/"
  L1_NORMALIZE: "L1_normalize/"
  DESIGN_TABLE: "design_table.csv"
  METADATA_VARS_TABLE: "L1_metadata/L1_metadata_vars.csv"
  OOS: "out-of-service/"
  debug: false
  remove_input_files: false
  logfile: ""
date: now
date-format: "YYYY-MM-DD HH:mm:ssZ"
format: 
  html:
    code-fold: true
editor: visual
---

This script

-   Reads in the L0 files one by one

-   Joins with the design table, adding `Site`, `design_link`, and `research_name` columns (every loggernet variable must have an entry)

-   Performs unit conversion (every research name must have an entry)

-   Performs bounds checking (adding a `F_OOB` flag) for each `research_name` variable

-   Integrated out-of-service records into a `F_OOS` flag

-   Writes into <year><month><site> folders

## Initializing

```{r init}
#| include: false

library(lubridate)
library(tidyr)
library(readr)
library(compasstools)
if(packageVersion("compasstools") < "0.2") {
    stop("Please update to latest version of compasstools!\n",
         "devtools::install_github('COMPASS-DOE/compasstools')")
}

# Warnings are not allowed here, as this usually means a column format
# problem that we want to fix immediately
oldwarn <- options()$warn
options(warn = 2)

# Read the design table (everything must have an entry)
DESIGN_TABLE <- file.path(params$METADATA_ROOT, params$DESIGN_TABLE)
dt <- read_csv(DESIGN_TABLE, col_types = "cccccDcc")
dt$note <- NULL
# For compactness, the design table may have expansions. For example,
# "DiffVoltA_Avg({1:8})" -> "DiffVoltA_Avg(1)", "DiffVoltA_Avg(2)", etc., with
# extra rows added as needed:
dt_ex <- compasstools::expand_df(dt)
links <- na.omit(dt_ex$design_link)
if(any(duplicated(links))) {
    stop("There are duplicated design links: ", 
         paste(unique(links[duplicated(links)]), collapse = ", "))
}

# Read the variable metadata table
METADATA_VARS_TABLE <- file.path(params$METADATA_ROOT, params$METADATA_VARS_TABLE)
mt <- read_csv(METADATA_VARS_TABLE, col_types = "ccccccddc")
# ...and create the units table (everything must have an entry)
ut <- mt[!is.na(mt$research_name),] # filter
ut$new_unit = ut$final_units # rename
ut <- ut[c("research_name", "conversion", "new_unit")] # select

# Create the bounds table (not everything needs an entry)
bt <- mt[!is.na(mt$research_name) & !is.na(mt$final_units),] # filter
bt$units = bt$final_units # rename
bt <- bt[c("research_name", "units", "low_bound", "high_bound")] # select

L0 <- file.path(params$DATA_ROOT, params$L0)
files_to_process <- list.files(L0, pattern = "*.csv$", full.names = TRUE)

L1_NORMALIZE <- file.path(params$DATA_ROOT, params$L1_NORMALIZE)

source("helpers.R")
source("out-of-service.R")

# Read the Aquatroll out-of-service table
troll <- read_csv(file.path(params$METADATA_ROOT, params$OOS,
                            "troll_maintenance.csv"), col_types = "cccccccc")
oos_troll <- prep_troll_oos_table(troll) # in helpers.R

# Restore old warning setting
options(warn = oldwarn)
```

I see `r length(files_to_process)` files to process in `r L0`.

Output directory is `r L1_NORMALIZE`.

Design table "`r DESIGN_TABLE`" and has `r nrow(dt)` rows, `r nrow(dt_ex)` after expansion.

Variable metadata table is "`r METADATA_VARS_TABLE`" and has `r nrow(mt)` rows.

Units table has `r nrow(ut)` rows; bounds table `r nrow(bt)`.

Troll out-of-service table has `r nrow(oos_troll)` rows.

HTML outfile is "`r params$html_outfile`".

## Processing

```{r processing}
overwrites <- 0
errors <- 0

f <- function(fn, out_dir, design_table) {
    message(Sys.time(), " Processing ", basename(fn))
    
    # The row of the summary data frame, displayed at the end of processing, for this data file
    smry <- data.frame(File = basename(fn), 
                       no_design_links = NA_integer_,
                       `OOB%` = NA_real_,
                       `OOS%` = NA_real_,
                       Note = "",
                       check.names = FALSE)
    dat <- read_csv(fn, 
                    # don't want timestamp parsed to a datetime at this point
                    col_types = list(TIMESTAMP = col_character()))

    # ------------- Design table
    
    # Check for missing entries in the design table
    ltlv <- unique(paste(dat$Logger, dat$Table, dat$loggernet_variable))
    present <- ltlv %in% paste(design_table$Logger, 
                               design_table$Table,
                               design_table$loggernet_variable)
    if(!all(present)) {
        stop("Some entries are missing in the design table!",
             paste(ltlv[!present], collapse = ", "))
    }

    # Join with design table
    old_rows <- nrow(dat)
    dat <- merge(dat, design_table,
                 by = c("Logger", "Table", "loggernet_variable"),
                 sort = FALSE)
    # This is a left join, and normally should not have changed the number of rows
    # The exception would be if a sensor has been reassigned; in that case it will have
    # >1 entry in the design table, with the "valid_through" column controlling when the
    # old assignment becomes invalid and the new one takes over. Call valid_entries()
    # (in helpers.R) to figure out which mappings should apply.
    message("\tChecking for multiple-match design links...")
    dat_retain <- valid_entries(objects = dat$loggernet_variable,
                                times = substr(dat$TIMESTAMP, 1, 10), # isolate YYYY-MM-DD
                                valid_through = dat$valid_through)

    message("\tDropping ", sum(!dat_retain), " out-of-date design links")
    dat <- dat[dat_retain,]
    dat$valid_through <- NULL
    
    # At this point, there should be exactly one match for every loggernet variable
    if(nrow(dat) > old_rows) {
        counts <- aggregate(design_link ~ loggernet_variable, data = dat, 
                            FUN = function(x) length(unique(x)))
        counts <- counts[counts$design_link > 1,]
        stop("Some loggernet variables in ", fn, " have more than one design_link: ",
             paste(counts$loggernet_variable, collapse = ", "))
    }
    
    # Summary information
    smry$no_design_links <- sum(is.na(dat$design_link))
    message("\tFiltering out ", smry$no_design_links, " empty design_link rows")
    dat <- subset(dat, !is.na(dat$design_link))
    
    # If no rows left, note this fact and move on
    if(!nrow(dat)) {
        smry$Note <- "No design links; nothing to process"
        return(smry)
    }
    
    # ------------- Unit conversion
    
    # Check for missing entries in the units table
    rns <- unique(dat$research_name)
    missings <- rns[!rns %in% ut$research_name]
    if(length(missings)) {
        missing_units <- paste(missings, collapse = ", ")
        missing_units <- strwrap(missing_units, width = 40)
        message("\tERROR: missing units entries: ",
                paste(missing_units, collapse = "\n\t\t"))
        smry$Note <- "Missing unit entries" 
        errors <<- errors + 1
        return(smry)
    }
    
    message("\tDoing unit conversion")
    # At this point everything in the value column should be numeric
    dat$value <- as.numeric(dat$value)
    dat <- compasstools::unit_conversion(dat, ut)
    nd <- names(dat)
    names(dat)[nd == "value"] <- "value_raw"
    names(dat)[nd == "value_conv"] <- "value"

    # ------------- Out-of-bounds flags
    
    message("\tAdding OOB flags")
    dat <- merge(dat, bt, by = c("research_name", "units"))
    dat$F_OOB <- as.integer(with(dat, value < low_bound | value > high_bound))
    smry$`OOB%` <- round(sum(dat$F_OOB) / nrow(dat) * 100, 1)
    # Remove unneeded columns unless needed for debugging
    if(!params$debug) {
        message("\tDropping bounds columns")
        dat$low_bound <- dat$high_bound <- NULL
    }
    
    # ------------- Out-of-service flags

    message("\tAdding OOS flags")
    x <- separate(dat, design_link, sep = "-", 
                  into = c("What", "Site", "Location", "Sensor"))
    # It turns out that the out of service check is SUPER expensive (50% of driver runtime)
    # Since right now it's only applicable to Aquatroll, so check for this and skip if possible
    if(grepl("WaterLevel", dat$Table[1])) {
        dat$F_OOS <- as.integer(oos(oos_troll, x))
    } else {
        dat$F_OOS <- 0L
    }
    smry$`OOS%` <- round(sum(dat$F_OOS) / nrow(dat) * 100, 1)

    # ------------- Write output files and clean up

    write_to_folders(dat, 
                     root_dir = out_dir, 
                     data_level = "L1_normalize",
                     site = dat$Site[1], 
                     logger = dat$Logger[1],
                     table = dat$Table[1])
    
    if(params$remove_input_files) {
        message("\tRemoving input files")
        file.remove(fn)
    }
    
    return(smry)
}

log_info("About to L1_normalize", logfile = params$logfile)
tryCatch({
out <- lapply(files_to_process, f, 
              out_dir = L1_NORMALIZE,
              design_table = dt_ex)
},
error = function(e) {
    log_warning("L1_normalize: an error occurred!", logfile = params$logfile)
    log_info(as.character(e), logfile = params$logfile)
    stop(e)
})
```

## Summary

```{r summary}
#| echo: false
#| output: asis
if(overwrites) {
    cat("### WARNING: ", overwrites, " file overwrite(s)\n")
    log_warning(paste("File overwrite(s)", params$html_outfile), 
                logfile = params$logfile)
}
if(errors) {
    cat("### ERROR: ", errors, " error(s)\n")
    log_warning(paste("File read/write or processing error(s)", params$html_outfile), 
                logfile = params$logfile)
}
```

```{r summary_table}
out_df <- do.call("rbind", out)
knitr::kable(out_df)
```

## Reproducibility

Git commit `r GIT_COMMIT`.

```{r reproducibility}
sessionInfo()
```
