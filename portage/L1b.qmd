---
title: "L1b"
author: "COMPASS workflows team"
title-block-banner: true
params:
  L1a: "data_TEST/L1a/"
  remove_input_files: false
  L1b: "data_TEST/L1b/"
  html_outfile: "L1b.html"
  logfile: ""
date: now
date-format: "YYYY-MM-DD HH:mm:ssZ"
format: 
  html:
    code-fold: true
editor: visual
---

## Initializing

```{r}
#| include: false

library(tidyr)
library(dplyr)
library(readr)
library(lubridate)
library(compasstools)
if(!exists("scan_folders")) {
    stop("Please update to latest version of compasstools!\n",
         "devtools::install_github('COMPASS-DOE/compasstools')")
}

source("helpers.R")

dirs_to_process <- scan_folders(params$L1a)
```

I see `r length(dirs_to_process)` directories to process.

HTML outfile is "`r params$html_outfile`".

## Processing

```{r}
overwrites <- 0
errors <- 0
dat_issues <- 0

f <- function(dir_name, dirs_to_process, out_dir) {
    message(Sys.time(), " Processing ", basename(dir_name))
    message("\tIt has ", length(dirs_to_process[[dir_name]]), " files")
    
    dat <- read_file_group(dirs_to_process[[dir_name]],
                           remove_input_files = params$remove_input_files)
    errors <<- errors + attr(dat, "errors")
    
    # File-based summary
    message("\tTotal data: ", nrow(dat), " rows, ", ncol(dat), " columns")
    smry <- data.frame(Dir = dir_name, Files = length(dirs_to_process[[dir_name]]), 
                       Rows = nrow(dat), note = "")

    # Separate OOB flags for reshaping
    dat %>% 
        select(TIMESTAMP, Site, Plot, Tree, research_name, OOB) %>% 
        pivot_wider(names_from = "research_name", 
                    values_from = "OOB", 
                    names_prefix = "OOB_") ->
        OOBs
    
    # Reshape to wide form, with one experimental unit (here, tree) per row
    dat %>% 
        mutate(research_name_units = paste(research_name, units, sep = "_")) %>% 
        select(TIMESTAMP, value, research_name_units, Site, Plot, Tree) %>% 
        pivot_wider(names_from = "research_name_units", values_from = "value") %>% 
        left_join(OOBs, by = c("TIMESTAMP", "Site", "Plot", "Tree")) ->
        dat_final
    
    # Write out to L1b/
    write_to_folders(dat_final, root_dir = out_dir, data_level = "L1b",
                     site = dat_final$Site[1], logger = "", table = "")
    
    return(smry)
}

out <- lapply(names(dirs_to_process), f, 
              dirs_to_process = dirs_to_process, out_dir = params$L1b)
```

## Summary

```{r}
#| echo: false
#| output: asis
if(overwrites) {
    cat("### WARNING: ", overwrites, " file overwrite(s)\n")
    log_warning(paste("File overwrite(s)", params$html_outfile), 
                logfile = params$logfile)
}
if(errors) {
    cat("### WARNING: ", errors, " file read/write error(s)\n")
    log_warning(paste("File read/write error(s)", params$html_outfile), 
                logfile = params$logfile)
}
if(dat_issues) {
    cat("### WARNING: ", dat_issues, " design/plot table structure problem(s)\n")
    log_warning(paste("Design/plot table structure problem(s)", params$html_outfile), 
                logfile = params$logfile)
}
```

```{r}
out_df <- do.call("rbind", out)
knitr::kable(out_df)
```

## Reproducibility

```{r}
sessionInfo()
```
