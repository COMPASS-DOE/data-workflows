---
title: "L1b"
author: "COMPASS workflows team"
title-block-banner: true
params:
  html_outfile: "L1b.html"
  DATA_ROOT: "data_TEST/"
  L1A: "L1a/"
  L1B: "L1b/"
  timestamp_round: "15 minutes"
  remove_input_files: false
  logfile: ""
date: now
date-format: "YYYY-MM-DD HH:mm:ssZ"
format: 
  html:
    code-fold: true
editor: visual
---

This script

-   Computes new variables: `sapflow_avg` (a test)

-   Loads all template tables and generates L1a output tables from them

## Initializing

```{r init}
#| include: false

library(tidyr)
library(dplyr)
library(readr)
library(lubridate)
library(compasstools)
if(packageVersion("compasstools") < "0.2") {
    stop("Please update to latest version of compasstools!\n",
         "devtools::install_github('COMPASS-DOE/compasstools')")
}

source("helpers.R")

L1A <- file.path(params$DATA_ROOT, params$L1A)
dirs_to_process <- scan_folders(L1A)
L1B <- file.path(params$DATA_ROOT, params$L1B)
```

I see `r length(dirs_to_process)` directories to process in `r L1A`.

Output directory is `r L1B`.

HTML outfile is "`r params$html_outfile`".

## Processing

```{r processing}
overwrites <- 0
errors <- 0
dat_issues <- 0

f <- function(dir_name, dirs_to_process, out_dir) {
    message(Sys.time(), " Processing ", basename(dir_name))
    message("\tIt has ", length(dirs_to_process[[dir_name]]), " files")
    
    dat <- read_csv_group(dirs_to_process[[dir_name]],
                          remove_input_files = params$remove_input_files,
                          show_col_types = FALSE)
    errors <<- errors + attr(dat, "errors")
    
    # File-based summary
    message("\tTotal data: ", nrow(dat), " rows, ", ncol(dat), " columns")
    smry <- data.frame(Dir = dir_name,
                       Files = length(dirs_to_process[[dir_name]]), 
                       Rows = nrow(dat),
                       Note = "")

    # Round timestamps and compute per-period averages
    # Note that this depends on L1a putting all grouping columns to the left of TIMESTAMP
    # TODO: maybe don't use dplyr for this? Their NSE approach has changed so many times...
    grouping_vars <- colnames(dat)[1:which(colnames(dat) == "TIMESTAMP")]
    grouping_vars <- c(grouping_vars, "units")
    message("\tRounding timestamps to nearest ", params$timestamp_round)
    # Note that L1a preserves multiple observations within a given
    # timestamp, whereas L1b computes their average
    dat %>% 
        mutate(TIMESTAMP = round_date(TIMESTAMP, params$timestamp_round)) %>% 
        group_by(across(all_of(grouping_vars))) %>% 
        summarise(value = mean(value, na.rm = TRUE),
                  N = n(),
                  .groups = "drop") ->
        dat

    # Reshape to wide form, with one experimental unit (here, tree) per row
    dat %>% 
        unite("rn_units", research_name, units) %>% 
        pivot_wider(names_from = "rn_units", values_from = "value") ->
        dat_final
    
    # Write out to L1b/
    # Extract table name from dir name (should be last element)
    x <- strsplit(dir_name, "_")[[1]]
    write_to_folders(dat_final, 
                     root_dir = out_dir,
                     data_level = "L1b",
                     site = dat_final$Site[1],
                     table = x[length(x)])
    
    return(smry)
}

log_info("About to L1b", logfile = params$logfile)
tryCatch({
out <- lapply(names(dirs_to_process), f, 
              dirs_to_process = dirs_to_process, out_dir = L1B)
},
error = function(e) {
    log_warning("L1b: an error occurred!", logfile = params$logfile)
    log_info(as.character(e), logfile = params$logfile)
    stop(e)
})
```

## Summary

```{r summary}
#| echo: false
#| output: asis
if(overwrites) {
    cat("### WARNING: ", overwrites, " file overwrite(s)\n")
    log_warning(paste("File overwrite(s)", params$html_outfile), 
                logfile = params$logfile)
}
if(errors) {
    cat("### WARNING: ", errors, " file read/write error(s)\n")
    log_warning(paste("File read/write error(s)", params$html_outfile), 
                logfile = params$logfile)
}
if(dat_issues) {
    cat("### WARNING: ", dat_issues, " design/plot table structure problem(s)\n")
    log_warning(paste("Design/plot table structure problem(s)", params$html_outfile), 
                logfile = params$logfile)
}
```

```{r summary_table}
out_df <- do.call("rbind", out)
knitr::kable(out_df)
```

## Reproducibility

```{r reproducibility}
sessionInfo()
```
