---
title: "L1b"
author: "COMPASS workflows team"
title-block-banner: true
params:
  L1a: "data/L1a/"
  L1b: "data/L1b/"
  plot_table: "plot_table.csv"
  html_outfile: "L1b.html"
date: now
date-format: "YYYY-MM-DD HH:mm:ssZ"
format: 
  html:
    code-fold: true
editor: visual
---

## Initializing

```{r}
#| output: false
library(tidyr)
library(dplyr)
library(readr)
library(compasstools)
if(!exists("scan_folders")) {
    stop("Please update to latest version of compasstools!\n",
         "devtools::install_github('COMPASS-DOE/compasstools')")
}
pt <- read_csv(params$plot_table)
pt_ex <- expand_df(pt)

source("helpers.R")

dirs_to_process <- scan_folders(params$L1a)
```

I see `r length(dirs_to_process)` directories to process.

Plot table is `r nrow(pt)` rows, `r nrow(pt_ex)` after expansion.

HTML outfile is "`r params$html_outfile`".

## Processing

```{r}
overwrites <- 0
errors <- 0

f <- function(dir_name, dirs_to_process, out_dir) {
    message(Sys.time(), " Processing ", basename(dir_name))
    message("\tIt has ", length(dirs_to_process[[dir_name]]), " files")

    # Read in all files and bind data frames
    readf <- function(fn) {
        message("\tReading ", basename(fn))
        # these files should all have same columns and types:
        # Logger, Table, TIMESTAMP, loggernet_variable, 
        # design_link, research_name, OOB, and Units
        x <- try(read_csv(fn, col_types = "ccTcdccic"))
        if(!is.data.frame(x)) {
            errors <<- errors + 1
            return(NULL)
        }
        x
    }
    lapply(dirs_to_process[[dir_name]], readf) %>% 
        bind_rows() ->
        dat
    message("\tTotal data: ", nrow(dat), " rows, ", ncol(dat), " columns")
    
    # Do the plot table merge
    dat %>% 
        right_join(pt_ex, by = "design_link") ->
    dat_mrg
    
    # Potential error check
    # What rows don't have a plot_table match?
    
    # Separate OOBs
    dat_mrg %>% 
        select(TIMESTAMP, Site, Plot, Tree, research_name, OOB) %>% 
        pivot_wider(names_from = "research_name", values_from = "OOB", names_prefix = "OOB_") ->
        OOBs
    
    # Reshape
    dat_mrg %>% 
        mutate(research_name_units = paste(research_name, Units, sep = "_")) %>% 
        select(TIMESTAMP, value, research_name_units, Site, Plot, Tree) %>% 
        pivot_wider(names_from = "research_name_units", values_from = "value") %>% 
        left_join(OOBs, by = c("TIMESTAMP", "Site", "Plot", "Tree"))
    
    # Write out to L1b/
}

out <- lapply(names(dirs_to_process), f, 
              dirs_to_process = dirs_to_process, out_dir = params$L1b)
```

## Summary

```{r}
#| echo: false
#| output: asis
if(overwrites) {
    cat("### WARNING: ", overwrites, " file overwrite(s)\n")
    log_warning(paste("File overwrite(s)", params$html_outfile), 
                logfile = params$logfile)
}
if(errors) {
    cat("### WARNING: ", errors, " file read/write error(s)\n")
    log_warning(paste("File read/write error(s)", params$html_outfile), 
                logfile = params$logfile)
}
```

```{r}
#| echo: false
#| output: asis
if(overwrites) {
    cat("### WARNING: ", overwrites, " file overwrite(s)\n")
    log_warning(paste("File overwrite(s)", params$html_outfile), 
                logfile = params$logfile)
}
if(errors) {
    cat("### WARNING: ", errors, " file read/write error(s)\n")
    log_warning(paste("File read/write error(s)", params$html_outfile), 
                logfile = params$logfile)
}
```

```{r}
#out_df <- do.call("rbind", out)
#knitr::kable(out_df)
```

## Reproducibility

```{r}
sessionInfo()
```
